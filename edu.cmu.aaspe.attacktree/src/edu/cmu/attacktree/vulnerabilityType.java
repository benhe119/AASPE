/**
 */
package edu.cmu.attacktree;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>vulnerability Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see edu.cmu.attacktree.AttackTreePackage#getvulnerabilityType()
 * @model
 * @generated
 */
public enum vulnerabilityType implements Enumerator {
	/**
	 * The '<em><b>Timing</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #TIMING_VALUE
	 * @generated
	 * @ordered
	 */
	TIMING(0, "Timing", "Timing"),

	/**
	 * The '<em><b>Isolation</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #ISOLATION_VALUE
	 * @generated
	 * @ordered
	 */
	ISOLATION(1, "Isolation", "Isolation"),

	/**
	 * The '<em><b>Resource Allocation</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #RESOURCE_ALLOCATION_VALUE
	 * @generated
	 * @ordered
	 */
	RESOURCE_ALLOCATION(2, "ResourceAllocation", "ResourceAllocation"),

	/**
	 * The '<em><b>Exposure</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #EXPOSURE_VALUE
	 * @generated
	 * @ordered
	 */
	EXPOSURE(3, "Exposure", "Exposure"),

	/**
	 * The '<em><b>Authentication</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #AUTHENTICATION_VALUE
	 * @generated
	 * @ordered
	 */
	AUTHENTICATION(4, "Authentication", "Authentication"),

	/**
	 * The '<em><b>Concurrency</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #CONCURRENCY_VALUE
	 * @generated
	 * @ordered
	 */
	CONCURRENCY(5, "Concurrency", "Concurrency");

	/**
	 * The '<em><b>Timing</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Timing</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #TIMING
	 * @model name="Timing"
	 * @generated
	 * @ordered
	 */
	public static final int TIMING_VALUE = 0;

	/**
	 * The '<em><b>Isolation</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Isolation</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #ISOLATION
	 * @model name="Isolation"
	 * @generated
	 * @ordered
	 */
	public static final int ISOLATION_VALUE = 1;

	/**
	 * The '<em><b>Resource Allocation</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Resource Allocation</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #RESOURCE_ALLOCATION
	 * @model name="ResourceAllocation"
	 * @generated
	 * @ordered
	 */
	public static final int RESOURCE_ALLOCATION_VALUE = 2;

	/**
	 * The '<em><b>Exposure</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Exposure</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #EXPOSURE
	 * @model name="Exposure"
	 * @generated
	 * @ordered
	 */
	public static final int EXPOSURE_VALUE = 3;

	/**
	 * The '<em><b>Authentication</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Authentication</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #AUTHENTICATION
	 * @model name="Authentication"
	 * @generated
	 * @ordered
	 */
	public static final int AUTHENTICATION_VALUE = 4;

	/**
	 * The '<em><b>Concurrency</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Concurrency</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @see #CONCURRENCY
	 * @model name="Concurrency"
	 * @generated
	 * @ordered
	 */
	public static final int CONCURRENCY_VALUE = 5;

	/**
	 * An array of all the '<em><b>vulnerability Type</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final vulnerabilityType[] VALUES_ARRAY =
		new vulnerabilityType[] {
			TIMING,
			ISOLATION,
			RESOURCE_ALLOCATION,
			EXPOSURE,
			AUTHENTICATION,
			CONCURRENCY,
		};

	/**
	 * A public read-only list of all the '<em><b>vulnerability Type</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final List<vulnerabilityType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

	/**
	 * Returns the '<em><b>vulnerability Type</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param literal the literal.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static vulnerabilityType get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			vulnerabilityType result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>vulnerability Type</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param name the name.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static vulnerabilityType getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			vulnerabilityType result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>vulnerability Type</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the integer value.
	 * @return the matching enumerator or <code>null</code>.
	 * @generated
	 */
	public static vulnerabilityType get(int value) {
		switch (value) {
			case TIMING_VALUE: return TIMING;
			case ISOLATION_VALUE: return ISOLATION;
			case RESOURCE_ALLOCATION_VALUE: return RESOURCE_ALLOCATION;
			case EXPOSURE_VALUE: return EXPOSURE;
			case AUTHENTICATION_VALUE: return AUTHENTICATION;
			case CONCURRENCY_VALUE: return CONCURRENCY;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final int value;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final String name;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private final String literal;

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private vulnerabilityType(int value, String name, String literal) {
		this.value = value;
		this.name = name;
		this.literal = literal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getValue() {
	  return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
	  return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getLiteral() {
	  return literal;
	}

	/**
	 * Returns the literal value of the enumerator, which is its string representation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		return literal;
	}
	
} //vulnerabilityType
